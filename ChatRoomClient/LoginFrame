package cn.shawyaw.chatroom;

import javax.swing.*;
import java.awt.*;


public class LoginFrame extends JFrame {
    private static final long serialVersionUID = 1L;
    private JTextField usernameField;
    private JPasswordField passwordField;
    private JButton loginButton;
    private JButton registerButton;  
    private static LoginFrame instance;

    public static LoginFrame getInstance() {
        if (instance == null) {
            instance = new LoginFrame();
        }
        return instance;
    }

    public static void launch() {
        SwingUtilities.invokeLater(() -> {
            getInstance().setVisible(true);
        });
    }

    private LoginFrame() {
        // 设置窗口标题和图标
        setTitle("登陆窗口");
        setIconImage(new ImageIcon("path/to/icon.png").getImage());  // 需要添加图标路径

        // 设置窗口大小和位置
        setSize(400, 300);
        setLocationRelativeTo(null);  // 居中显示
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setResizable(false);  // 禁止调整大小

        // 创建主面板
        JPanel mainPanel = new JPanel(null);  // 使用绝对布局

        // 添加标题标签
        JLabel titleLabel = new JLabel("网络聊天室用户登陆", SwingConstants.CENTER);
        titleLabel.setFont(new Font("宋体", Font.BOLD, 20));
        titleLabel.setBounds(0, 20, 400, 40);
        mainPanel.add(titleLabel);

        // 用户名输入区域
        JLabel userLabel = new JLabel("用户名：");
        userLabel.setBounds(70, 80, 60, 25);
        mainPanel.add(userLabel);

        usernameField = new JTextField();
        usernameField.setBounds(130, 80, 200, 25);
        mainPanel.add(usernameField);

        // 密码输入区域
        JLabel passLabel = new JLabel("密  码：");
        passLabel.setBounds(70, 120, 60, 25);
        mainPanel.add(passLabel);

        passwordField = new JPasswordField();
        passwordField.setBounds(130, 120, 200, 25);
        mainPanel.add(passwordField);

        // 按钮区域
        loginButton = new JButton("登陆");
        loginButton.setBounds(100, 180, 80, 30);
        mainPanel.add(loginButton);

        registerButton = new JButton("注册");  // 将"重置"改为"注册"
        registerButton.setBounds(220, 180, 80, 30);
        mainPanel.add(registerButton);

        // 添加按钮事件监听
        loginButton.addActionListener(e -> handleLogin());
        registerButton.addActionListener(e -> handleRegister());

        // 添加回车键登录
        getRootPane().setDefaultButton(loginButton);

        // 设置主面板
        setContentPane(mainPanel);

        // 设置窗口风格
        try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
            SwingUtilities.updateComponentTreeUI(this);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void handleLogin() {
        String username = usernameField.getText().trim();
        String password = new String(passwordField.getPassword());

        if (username.isEmpty() || password.isEmpty()) {
            JOptionPane.showMessageDialog(this, 
                "用户名和密码不能为空！", "错误", JOptionPane.ERROR_MESSAGE);
            return;
        }

        System.out.println("开始登录 - 用户名: " + username); // 调试信息
        
        try {
            // 初始化连接
            Connect connect = Connect.getInstance();
            
            // 保存用户名
            MainApplication.getInstance().self.name = username;
            
            // 发送登录请求
            connect.sendLoginRequest(username, password);
            
            // 启动接收消息的线程
            if (!connect.isRunning) {
                System.out.println("启动消息接收线程"); // 调试信息
                Thread receiveThread = new Thread(connect);
                receiveThread.setDaemon(true); // 设置为守护线程
                receiveThread.start();
                connect.isRunning = true;
                System.out.println("消息接收线程已启动"); // 调试信息
            }
            
        } catch (Exception e) {
            System.out.println("连接服务器失败: " + e.getMessage());
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, 
                "连接服务器失败，请检查网络连接", "错误", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void handleRegister() {
        String username = usernameField.getText().trim();
        String password = new String(passwordField.getPassword());

        if (username.isEmpty() || password.isEmpty()) {
            JOptionPane.showMessageDialog(this, 
                "用户名和密码不能为空！", "错误", JOptionPane.ERROR_MESSAGE);
            return;
        }

        System.out.println("开始注册 - 用户名: " + username);
        
        try {
            // 初始化连接
            Connect connect = Connect.getInstance();
            
            // 发送注册请求
            connect.sendRegisterRequest(username, password);
            
            // 启动接收消息的线程
            if (!connect.isRunning) {
                System.out.println("启动消息接收线程");
                Thread receiveThread = new Thread(connect);
                receiveThread.setDaemon(true);
                receiveThread.start();
                connect.isRunning = true;
                System.out.println("消息接收线程已启动");
            }
            
        } catch (Exception e) {
            System.out.println("连接服务器失败: " + e.getMessage());
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, 
                "连接服务器失败，请检查网络连接", "错误", JOptionPane.ERROR_MESSAGE);
        }
    }

    public void showLoginError(String message) {
        JOptionPane.showMessageDialog(this, message, "登录失败", JOptionPane.ERROR_MESSAGE);
    }


}
